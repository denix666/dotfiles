#!/bin/bash

# Define symbols
SYMBOL_OK='✔'
SYMBOL_ERROR='✘'
SYMBOL_BRANCH1=''
SYMBOL_BRANCH2='⎇ '
SYMBOL_NEWLINE='$'
SYMBOL_NEWLINE_ROOT='#'
SYMBOL_SEGMENT_SEPARATOR=''
SYMBOL_WORKING_DIR_SEPARATOR='-> '

# Define colors
BG_GRAY='\[\e[48;5;238m\]'
BG_BLUE='\[\e[48;5;017m\]'
BG_BROWN='\[\e[48;5;237m\]'
BG_CYAN='\[\e[48;5;031m\]'
BG_SALAD='\[\e[48;5;078m\]'

FG_RED='\[\e[38;5;196m\]'
FG_GREEN='\[\e[38;5;46m\]'
FG_YELLOW='\[\e[38;5;226m\]'
FG_CYAN='\[\e[38;5;031m\]'
FG_BLUE='\[\e[38;5;033m\]'
FG_DARKBLUE='\[\e[38;5;017m\]'
FG_WHITE='\[\e[38;5;015m\]'
FG_BLACK='\[\e[30m\]'
FG_PURPLE='\[\e[38;5;163m\]'
FG_GRAY='\[\e[38;5;238m\]'
FG_BROWN='\[\e[38;5;237m\]'
FG_SALAD='\[\e[38;5;078m\]'

FG_BOLD_RED='\[\e[1;31m\]'
FG_BOLD_GREEN='\[\e[1;32m\]'
FG_BOLD_YELLOW='\[\e[1;33m\]'
FG_BOLD_CYAN='\[\e[1;36m\]'
FG_BOLD_BLUE='\[\e[1;34m\]'
FG_BOLD_WHITE='\[\e[1;37m\]'
FG_BOLD_BLACK='\[\e[1;30m\]'
FG_BOLD_PURPLE='\[\e[1;35m\]'

COLOR_OFF='\[\e[0m\]'

# Colorize errored execution
command_not_found_handle () {
    echo -e "\e[1;31m$0: $1: command not found\e[0;0m"
    return 127
}

# Archive extractor
ex () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1                             ;;
            *.tar.gz)    tar xzf $1                             ;;
            *.bz2)       bunzip2 $1                             ;;
            *.rar)       unrar x $1                             ;;
            *.gz)        gunzip $1                              ;;
            *.tar)       tar xf $1                              ;;
            *.tbz2)      tar xjf $1                             ;;
            *.tgz)       tar xzf $1                             ;;
            *.zip)       unzip $1                               ;;
            *.Z)         uncompress $1                          ;;
            *.7z)        7z x $1                                ;;
            *)           echo "'$1' cannot be extracted via ex" ;;
        esac
    else
        echo "Error: '$1' is not a valid file"
        echo "Usage: ex <archive file name>"
    fi
}

# Remote shell with custom profile
sshb () {
    local ssh="ssh -S ~/.ssh/control-socket-$(tr -cd '[:alnum:]' < /dev/urandom|head -c8)"
    $ssh -fNM -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$@"
    $ssh placeholder "cat >~/.bashrc-ssh" <~/.bashrc-ssh
    $ssh "$@" -t 'SHELL=~/.bashrc-ssh; bash --rcfile $SHELL -i'
    $ssh placeholder -O exit >/dev/null 2>&1
}

256-colors () {
    for fgbg in 38 48 ; do # Foreground / Background
	for color in {0..255} ; do # Colors
    	    # Display the color
    	    printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
    	    # Display 6 colors per lines
	    if [ $((($color + 1) % 6)) == 4 ] ; then
        	echo # New line
    	    fi
	done
	echo # New line
    done
}

# Make a temporary directory and enter it
tmpd () {
    local dir
    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || exit
}

# `o` with no arguments opens the current directory, otherwise opens the given location
o () {
    if [ $# -eq 0 ]; then
        xdg-open . >/dev/null 2>&1
    else
        xdg-open "$@" > /dev/null 2>&1
    fi
}

# check if uri is up
isup () {
    if curl -s --head  --request GET "$1" | grep "HTTP.*.200" >/dev/null; then
        echo -e "\e[1;32m$1 - is up\e[0;0m"
    else
        echo -e "\e[1;31m$1 - is down\e[0;0m"
    fi
}

# Automatically choose the right binary
hgit () {
    if [ -d .hg ]; then
        hg "$@"
    else
        git "$@"
    fi
}

# Patch persistence volume - remove finalizers
kp () {
    kubectl patch pv $1 -p '{"metadata":{"finalizers":null}}'
}

parse_changed () {
    changed=`expr $(git status --porcelain 2>/dev/null | wc -l)`
    if [ ${changed} -gt 0 ]; then
	echo "${FG_BOLD_RED}*${FG_BOLD_CYAN}"
    fi
}

branch_name () {
    branch=`git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ "${branch}" != "" ]; then
	echo " ${FG_BOLD_CYAN}(${SYMBOL_BRANCH2} $(parse_changed)${branch})${COLOR_OFF}"
    fi
}

# Simple prompt
ds_prompt () {
    if [ $? -eq 0 ]; then
        EXIT_STATUS="${FG_BOLD_GREEN}${SYMBOL_OK}${COLOR_OFF}"
    else
        EXIT_STATUS="${FG_BOLD_RED}${SYMBOL_ERROR}${COLOR_OFF}"
    fi

    PS1='\[\e]0;\u@\H:\w\a\]' # Set terminal title
    PS1+="${FG_BLUE}${EXIT_STATUS} ${FG_BLUE}${COLOR_OFF}"
    PS1+="${FG_PURPLE}\t ${COLOR_OFF}" # Show time

    if [[ ${EUID} == 0 ]] ; then
        PS1+="${FG_BOLD_RED}\u@\H ${COLOR_OFF}${FG_YELLOW}\w${COLOR_OFF} ${SYMBOL_NEWLINE_ROOT}"
    else
        PS1+="${FG_BOLD_GREEN}\u@\H ${COLOR_OFF}${FG_YELLOW}\w${COLOR_OFF}$(branch_name) ${SYMBOL_NEWLINE}"
    fi

    history -a
    history -r
}

# Color prompt
ds_color_prompt () {
    if [ $? -eq 0 ]; then
        EXIT_STATUS="${FG_BOLD_GREEN}${BG_GRAY}${SYMBOL_OK}${FG_GRAY}${BG_BLUE}${SYMBOL_SEGMENT_SEPARATOR}"
    else
        EXIT_STATUS="${FG_BOLD_RED}${BG_GRAY}${SYMBOL_ERROR}${FG_GRAY}${BG_BLUE}${SYMBOL_SEGMENT_SEPARATOR}"
    fi

    TIME="${FG_PURPLE}\t${FG_DARKBLUE}${BG_GRAY}${SYMBOL_SEGMENT_SEPARATOR}"
    CUR_DIR="${FG_YELLOW}\w${COLOR_OFF}"

    PS1='\[\e]0;\u@\H:\w\a\]' # Set terminal title
    PS1+="${EXIT_STATUS}"
    PS1+="${TIME}" # Show time

    if [[ ${EUID} == 0 ]] ; then
        PS1+="${FG_RED}\u@\H${COLOR_OFF}${FG_GRAY}${SYMBOL_SEGMENT_SEPARATOR}${COLOR_OFF}"
        PS1+="${CUR_DIR} ${SYMBOL_NEWLINE_ROOT}"
    else
        PS1+="${FG_GREEN}\u@\H${COLOR_OFF}${FG_GRAY}${SYMBOL_SEGMENT_SEPARATOR}${COLOR_OFF}"
        PS1+="${CUR_DIR}$(branch_name) ${SYMBOL_NEWLINE}"
    fi

    history -a
    history -r
}
