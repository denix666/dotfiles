#!/bin/bash

# Define symbols
SYMBOL_OK='✔'
SYMBOL_ERROR='✘'

# Define colors
FG_RED='\[\e[38;5;196m\]'
FG_GREEN='\[\e[38;5;118m\]'
FG_YELLOW='\[\e[38;5;226m\]'
FG_PURPLE='\[\e[38;5;165m\]'
FG_BLUE='\[\e[38;5;033m\]'
FG_WHITE='\[\e[38;5;015m\]'

FG_BOLD_RED='\[\e[1;31m\]'
FG_BOLD_GREEN='\[\e[1;32m\]'
FG_BOLD_YELLOW='\[\e[1;33m\]'
FG_BOLD_CYAN='\[\e[1;36m\]'
FG_BOLD_BLUE='\[\e[1;34m\]'
FG_BOLD_WHITE='\[\e[1;37m\]'
FG_BOLD_BLACK='\[\e[1;30m\]'
FG_BOLD_PURPLE='\[\e[1;35m\]'

COLOR_OFF='\[\e[0m\]'

# Colorize errored execution
command_not_found_handle () {
  echo -e "\e[1;31m$0: $1: command not found\e[0;0m"
  return 127
}

# Archive extractor
ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1                             ;;
      *.tar.gz)    tar xzf $1                             ;;
      *.bz2)       bunzip2 $1                             ;;
      *.rar)       unrar x $1                             ;;
      *.gz)        gunzip $1                              ;;
      *.tar)       tar xf $1                              ;;
      *.tbz2)      tar xjf $1                             ;;
      *.tgz)       tar xzf $1                             ;;
      *.zip)       unzip $1                               ;;
      *.Z)         uncompress $1                          ;;
      *.7z)        7z x $1                                ;;
      *)           echo "'$1' cannot be extracted via ex" ;;
    esac
  else
    echo "Error: '$1' is not a valid file"
    echo "Usage: ex <archive file name>"
  fi
}

# Remote shell with custom profile
sshb () {
    local ssh="ssh -S ~/.ssh/control-socket-$(tr -cd '[:alnum:]' < /dev/urandom|head -c8)"
    $ssh -fNM -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$@"
    $ssh placeholder "cat >~/.bashrc-ssh" <~/.bashrc-ssh
    $ssh "$@" -t 'SHELL=~/.bashrc-ssh; bash --rcfile $SHELL -i'
    $ssh placeholder -O exit >/dev/null 2>&1
}

# Make a temporary directory and enter it
tmpd () {
    local dir
    if [ $# -eq 0 ]; then
	dir=$(mktemp -d)
    else
	dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || exit
}

# `o` with no arguments opens the current directory, otherwise opens the given location
o () {
    if [ $# -eq 0 ]; then
	xdg-open . >/dev/null 2>&1
    else
	xdg-open "$@" > /dev/null 2>&1
    fi
}

# check if uri is up
isup () {
    if curl -s --head  --request GET "$1" | grep "HTTP.*.200" >/dev/null; then
	echo -e "\e[1;32m$1 - is up\e[0;0m"
    else
	echo -e "\e[1;31m$1 - is down\e[0;0m"
    fi
}

# Automatically choose the right binary
hgit () {
    if [ -d .hg ]; then
	hg "$@"
    else
	git "$@"
    fi
}

# Patch persistence volume - remove finalizers
kp () {
    kubectl patch pv $1 -p '{"metadata":{"finalizers":null}}'
}

# Define prompt
ds_prompt () {
    if [ $? -eq 0 ]; then
        EXIT_STATUS="${FG_BOLD_GREEN}${SYMBOL_OK}${COLOR_OFF}"
    else
        EXIT_STATUS="${FG_BOLD_RED}${SYMBOL_ERROR}${COLOR_OFF}"
    fi

    PS1='\[\e]0;\u@\H:\w\a\]' # Set terminal title

    PS1+="${FG_BLUE}[${EXIT_STATUS}${FG_BLUE}]${COLOR_OFF}"

    PS1+="${FG_PURPLE}[\t]${COLOR_OFF}" # Show time

    if [[ ${EUID} == 0 ]] ; then
        PS1+="{${FG_BOLD_RED}\u@\H${COLOR_OFF}}─> ${FG_YELLOW}\w${COLOR_OFF} #"
    else
        PS1+="{${FG_BOLD_GREEN}\u@\H${COLOR_OFF}}─> ${FG_YELLOW}\w${COLOR_OFF} $"
    fi

    history -a
    history -r
}
